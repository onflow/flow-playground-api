scalar UUID
scalar Address
scalar Version

type PlaygroundInfo {
  apiVersion: Version!
  cadenceVersion: Version!
}

type Project {
  id: UUID!
  publicId: UUID!
  parentId: UUID
  title: String
  description: String
  readme: String
  seed: Int!
  version: Version!
  persist: Boolean
  mutable: Boolean
  numberOfAccounts: Int!
  accounts: [Account!]
  transactionTemplates: [TransactionTemplate!]
  transactionExecutions: [TransactionExecution!]
  scriptTemplates: [ScriptTemplate!]
  scriptExecutions: [ScriptExecution!]
  contractTemplates: [ContractTemplate!]
  contractDeployments: [ContractDeployment!]
}

type Account {
  address: Address!
  deployedContracts: [String!]!
  state: String!
}

type ProgramError {
  message: String!
  startPosition: ProgramPosition
  endPosition: ProgramPosition
}

type ProgramPosition {
  offset: Int!
  line: Int!
  column: Int!
}

"""
type File {
  id: UUID!
  index: Int!
  title: String!
  type: Int!
  script: String!
}
"""


type TransactionTemplate {
  id: UUID!
  index: Int!
  title: String!
  script: String!
}


type TransactionExecution {
  id: UUID!
  script: String!
  arguments: [String!]
  signers: [Address!]!
  errors: [ProgramError!]
  events: [Event]!
  logs: [String!]!
}

type Event {
  type: String!
  values: [String!]!
}


type ScriptTemplate {
  id: UUID!
  index: Int!
  title: String!
  script: String!
}


type ScriptExecution {
  id: UUID!
  script: String!
  arguments: [String!]
  errors: [ProgramError!]
  value: String!
  logs: [String!]!
}


type ContractTemplate {
  id: UUID!
  index: Int!
  title: String!
  script: String!
}


type ContractDeployment {
  id: UUID!
  script: String!
  address: Address!
  errors: [ProgramError!]
  events: [Event!]
  logs: [String!]
}

type Query {
  playgroundInfo: PlaygroundInfo!
  project(id: UUID!): Project!
  account(address: Address!, projectId: UUID!): Account!

  contractTemplate(id: UUID!, projectId: UUID!): ContractTemplate!
  transactionTemplate(id: UUID!, projectId: UUID!): TransactionTemplate!
  scriptTemplate(id: UUID!, projectId: UUID!): ScriptTemplate!
}

input NewProject {
  parentId: UUID
  title: String!
  description: String!
  readme: String!
  seed: Int!
  numberOfAccounts: Int!
  transactionTemplates: [NewProjectTransactionTemplate!]
  scriptTemplates: [NewProjectScriptTemplate!]
  contractTemplates: [NewProjectContractTemplate!]
}

input NewProjectFile {
  title: String!
  script: String!
}

input NewProjectTransactionTemplate {
  title: String!
  script: String!
}

input NewProjectScriptTemplate {
  title: String!
  script: String!
}

input NewProjectContractTemplate {
  title: String!
  script: String!
}

input UpdateProject {
  id: UUID!
  title: String
  description: String
  readme: String
  persist: Boolean
}

input UpdateFile {
  id: UUID!
  title: String
  projectId: UUID!
  index: Int
  script: String
}

input NewFile {
  projectId: UUID!
  title: String!
  script: String!
}

input NewContractTemplate {
  projectId: UUID!
  title: String!
  script: String!
}

input UpdateContractTemplate {
  id: UUID!
  title: String
  projectId: UUID!
  index: Int
  script: String
}

input NewContractDeployment {
  projectId: UUID!
  script: String!
  address: Address!
}

input NewTransactionTemplate {
  projectId: UUID!
  title: String!
  script: String!
}

input UpdateTransactionTemplate {
  id: UUID!
  title: String
  projectId: UUID!
  index: Int
  script: String
}

input NewTransactionExecution {
  projectId: UUID!
  script: String!
  signers: [Address!]
  arguments: [String!]
}

input NewScriptTemplate {
  projectId: UUID!
  title: String!
  script: String!
}

input UpdateScriptTemplate {
  id: UUID!
  title: String
  projectId: UUID!
  index: Int
  script: String
}

input NewScriptExecution {
  projectId: UUID!
  script: String!
  arguments: [String!]
}

type Mutation {
  createProject(input: NewProject!): Project!
  updateProject(input: UpdateProject!): Project!

  createContractTemplate(input: NewContractTemplate!): ContractTemplate!
  updateContractTemplate(input: UpdateContractTemplate!): ContractTemplate!
  deleteContractTemplate(id: UUID!, projectId: UUID!): UUID!
  createContractDeployment(input: NewContractDeployment!): ContractDeployment!

  createTransactionTemplate(input: NewTransactionTemplate!): TransactionTemplate!
  updateTransactionTemplate(input: UpdateTransactionTemplate!): TransactionTemplate!
  deleteTransactionTemplate(id: UUID!, projectId: UUID!): UUID!
  createTransactionExecution(input: NewTransactionExecution!): TransactionExecution!

  createScriptTemplate(input: NewScriptTemplate!): ScriptTemplate!
  updateScriptTemplate(input: UpdateScriptTemplate!): ScriptTemplate!
  deleteScriptTemplate(id: UUID!, projectId: UUID!): UUID!
  createScriptExecution(input: NewScriptExecution!): ScriptExecution!
}
